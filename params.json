{"name":"one-command","tagline":"A CLI tool used to compile Minecraft commands into one-command installers, for map makers.","body":"one-command (beta)\r\n==================\r\nA Minecraft one-command combiner for map makers.\r\n\r\n![How it works](https://github.com/GnaspGames/one-command/raw/master/demo/one-command-demo.gif)\r\n\r\nInstall\r\n-------\r\n* Install Node and `npm`.\r\n* Run `npm install one_command -g` so that `one-command` can be used anywhere.\r\n\r\nRun it\r\n------\r\n* You need to have `.mcc` files using the *Input Syntax* described below.\r\n* Run `one-command /path/to/directory/or/file.mcc`.\r\n\t* `one-command /path/to/file.mcc debug` outputs extra data into the console.\r\n\t* `one-command /path/to/file.mcc output-command` outputs the compacted command the console.\r\n* Your combined commands will be on the `.oc` files with the same name as your `.mcc` files.\r\n\r\nDemonstration\r\n-------------\r\n\r\nDownload or clone the git repository to try the demo.\r\n\r\n* Use a console to navigate to the `demo` directory included.\r\n* Run `one-command demo.mcc` and then see the `demo.oc` file that is created.\r\n* Go into Minecraft 1.9^\r\n    * Put down a command block in most north-west corner of a spawn chunk.\r\n\t* Enter the command\r\n\t* Power the command block with a button (**NOT ON TOP**) of the command block.\r\n* See the demo command blocks appear.\r\n\r\nInput Syntax\r\n------------\r\n\r\nThere are 3 different types of lines used in the input syntax.\r\n\r\n### 1. The NEW line (starting with \"#\")\r\n\r\nEach of these starts a new line of command blocks. \r\n\r\nAny text found after the initial \"#\" is used to generate a \"line marker\" (a hidden marker armorstand with the text as the CustomName). \r\n\r\nThis helps to recognise lines of command blocks in your Minecraft world.\r\n\r\nUse a line with no text after the \"#\" to create a gap between your command block lines. No line marker will be created.\r\n\r\n### 2. The JSON line (using \"{\" and \"}\", always on one line)\r\n\r\nFor example `{\"type\":\"repeating\",\"auto\":\"true\"}`. \r\n\r\nThis is used to set the properties of all command blocks following until a tag is changed.\r\n\r\nProperties available to use are: \r\n\r\n**\"type\"**\r\n\r\nThis defines the type of command block that will be used for the following commands.\r\n\r\nPossible values are `\"impulse\"`, `\"repeating\"` or `\"chain\"`.\r\n\r\nExample: `{\"type\":\"repeating\"}`\r\n\r\n**\"auto\"**\r\n\r\nThis defines whether the following command blocks with be \"Always active\" (true), or \"Require redstone\" (false).\r\n\r\nPossible values are `true` or `false`. Double quotes should not be used around values on this property.\r\n\r\nExample: `{\"auto\":false}`\r\n\r\n**\"conditional\"**\r\n\r\nThis defines whether the following command blocks will be \"Conditional\", meaning that they will only execute \r\nif the previous command block executes successfully. \r\n\r\nPossible values are `true` or `false`. Double quotes should not be used around values on this property.\r\n\r\nExample: `{\"conditional\":true}`\r\n\r\n**\"executeAs\"**\r\n\r\nThis defines the executing entity for all following command blocks. \r\n\r\nCurrently this only supports one entity selector, but it extended to allow for more as a list.\r\n\r\nAny valid entity selector, e.g. `{\"executeAs\":\"@a[score_lives=0]\"}`\r\n\r\nThis will be inserted before any following commands as `/execute @a[score_lives=0] ~ ~ ~ /say Hello World`.\r\n\r\nUse `{\"executeAs\":\"\"}` to reset this option.\r\n\r\n### 3. The command line (starting with \"/\")\r\n\r\nEach of these commands is converted into the game, and the command-blocks executing them will use the properties \r\nfrom the previous JSON tags.\r\n\r\nYou can use anything on these lines that can be put into a command block in the game.\r\n\r\n### Everything else\r\n\r\nOther than that, if a line doesn't start with a \"#\", \"{\", or \"/\" then it will be ignored and you can put whatever \r\nyou want. Good for notes.\r\n\r\nExample:\r\n\r\n```\r\n# repeatThing\r\n{\"type\":\"repeating\",\"auto\":true}\r\n/testfor @e[name=repeatThing]\r\n\t{\"conditional\":true}\r\n\t/say repeatThing exists!\r\n\t\t{\"type\":\"chain\", \"conditional\":false}\r\n\t\t/say repeatThing still running!\r\n\t\t/say repeatThing finised!\r\n\t\t\r\n# Another line\r\n{\"type\":\"inpulse\",\"auto\":false}\r\n/say TEST\r\n\t{\"type\":\"chain\", \"auto\":true}\r\n\t/say TEST 2\r\n\t/say TEST 3\r\n```\r\n\r\nThis will create the following command-blocks:\r\n\r\nA repeating command block, with auto set to true, running the `/testfor @e[name=repeatThing]` command. \r\nThen a conditional repeating command block, with auto also set to true (inherited from last JSON tag), \r\nrunning the `/say repeatThing exists!` command. Then two non-conditional chain command blocks, with auto \r\nstill set to true as before (still using the previous value, not overwritten in last JSON tag line), running \r\nthe following commands: `/say repeatThing still running!` and `/say repeatThing finised!`.\r\n\r\nThen a new line of command blocks is started. First an inpulse command block, with auto set to false, which \r\nwould run the command `/say TEST` when executed. This is followed by two chain command blocks (still not conditional, \r\nsince it's still false from the previous reference), but now auto has been set to true, and they would run the following \r\ncommands when the impulse command is executed; `/say TEST 2` and `/say TEST 2`.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}